% New Friction
% Estimated Coulomb friction coefficients:
    %4.7660
    %4.7297
    %3.3605
    %1.3626
    %1.5072
    %1.5103
% Estimated Viscous friction coefficients:
    %9.7945
    %6.0775
    %4.5132
    %1.5348
    %1.3233
    %3.2397
%% Load Robot Model and Prepare Dynamics Inputs
robotStruct = load("ur5e.mat");
robot = robotStruct.robotUR5e;

q = filtered_pos';
dq = filtered_vel';
ddq = filtered_acc';

num_samples = size(q, 2);

grav_all = zeros(6, num_samples);
tau_model  = zeros(6, num_samples);
jac_all  = cell(1, num_samples);
inertia_all = cell(6, num_samples);
vel_prod_all = zeros(6, num_samples);


for i = 1:num_samples
    q_i = q(:, i);
    dq_i = dq(:, i);
    ddq_i = ddq(:, i);
    
    % Compute gravitational torques, Jacobian, mass matrix, and velocity product
    grav_all(:, i) = robot.gravityTorque(q_i);
    jac_all{i} = robot.geometricJacobian(q_i, 'end_effector');
    inertia_all{i} = robot.massMatrix(q_i);
    vel_prod_all(:, i) = robot.velocityProduct(q_i, dq_i);
    
    % Compute joint torques for the current sample
    tau_model(:, i) = inertia_all{i} * ddq_i + vel_prod_all(:, i) + grav_all(:, i);
end

% Now, tau_all contains the computed joint torques for all time samples.
figure;
for joint = 1:6
    subplot(6,1,joint);
    plot(t, tau_model(joint, :), 'LineWidth', 1.5); hold on;
    plot(t, avg_phase_torque(:, joint), 'LineWidth', 1.5); hold off;
    xlabel('Time (s)');
    ylabel('Torque (Nm)');
    title(sprintf('Joint %d Torque', joint));
end


%% Regressor matrix
tau_py = readmatrix('torques 1.csv');
tau_py = tau_py';
tau_py(4,:) = tau_py(4,:) - 0.25;
tau_py(3,:) = tau_py(3,:) + 0.25;
tau_fric = avg_phase_torque_fixed' - tau_py ; %Measurement - model?
[numJoints, numSamples] = size(dq);


Y = zeros(numJoints * numSamples, 2 * numJoints);

for k = 1:numSamples
    for i = 1:numJoints
        % Row index
        rowIdx = (k - 1) * numJoints + i;
        % Coulomb
        Y(rowIdx, i) = sign(dq(i, k));
        % Viscous
        Y(rowIdx, numJoints + i) = dq(i, k);
    end
end


%%
tau_friction_vec = reshape(tau_fric, [], 1);  % 30k x 1 vector

%Y_first = Y(1:6:end,[1,7]);
%tau_fric_first = tau_fric(1, :);
%pi = Y \ tau_friction_vec;
%pi_1 = linsolve(Y_first, tau_fric_first');
pi = Y \ tau_friction_vec;
%pi = linsolve(Y, tau_friction_vec)
%pi = pinv(Y)*tau_friction_vec
%pi(11) = pi(11) + 7.0;
% Extract the friction coefficients for each joint
f_coulomb = pi(1:6);      
f_viscous  = pi(7:12);     

% Display the estimated parameters
disp('Estimated Coulomb friction coefficients:');
disp(f_coulomb);

%pi(8) = pi(8) - 20.0
%pi(7:12) = pi(7:12) + 1.0
%f_v_new = f_viscous + 1.0;
disp('Estimated Viscous friction coefficients:');
disp(f_viscous);
%%
% Ting der kunne være forkert:
% FFT fjernelse af støj
% Y (regressor matrix)
% Tau_friction_est udregning
%pi = [4.5, 4.6, 3.3, 1.3, 1.4, 1.5, 9.3, 4.3, 4.9, 1.4, 1.4, 1.9]'
tau_friction_est = reshape(Y * pi, numJoints, numSamples);
%tau_friction_est_new = Y*pi;
% pi = 12x1, Y=30k x 12
%tau_friction_sum = sum(Y * pi);  %  12 x 1 vector
%tau_full_py = tau_py + tau_friction_est; %1,4,5,6
tau_full = tau_py + tau_friction_est; %2,3
%tau_full = zeros(6,5000);  % Pre-allocate the matrix with appropriate size

% Assigning values to the correct rows:
%tau_full([1, 4, 5, 6], :) = tau_py([1, 4, 5, 6], :) + tau_friction_est([1, 4, 5, 6], :);
%tau_full([2, 3], :) = tau_model([2,3], :) + tau_friction_est([2,3], :);
for joint = 1:6
    subplot(6,1,joint);
    plot(t, tau_full(joint, :), 'LineWidth', 1.5); hold on;
    %plot(t, tau_friction_est(joint, :), 'LineWidth', 1.5); hold on;
    plot(t, avg_phase_torque(:, joint), 'LineWidth', 1.5); hold off;
    disp(tau_full(joint,1))
    %disp(avg_phase_torque(joint,1))
    %disp(tau_full(joint,1)-avg_phase_torque(joint,1))
    xlabel('Time (s)');
    ylabel('Torque (Nm)');
    title(sprintf('Joint %d Torque', joint));
    legend('Dynamic model and estimated friction', 'Measured torques'); %'friction','Averaged measured torques');
end
%%
error = avg_phase_torque_fixed - tau_py'; % [10000 x 6]
figure;
for joint = 1:6
    subplot(3, 2, joint);
    plot(target_vel(:, joint), error(:, joint));
    
    % Apply different x-limits based on joint number
    if joint >= 4
        xlim([-0.2 0.2]);
    else
        xlim([-0.3 0.3]);
    end

    xlabel(['$\dot{q}_{', num2str(joint - 1), '}$ (rad/s)'], 'Interpreter', 'latex', 'FontSize', 16);
    ylabel('Torque Error (Nm)');
    grid on;

    legend(['$e_{\tau_{', num2str(joint - 1), '}}$'], ...
           'Interpreter', 'latex', 'FontSize', 20, 'Location', 'best');
end

maxlag = 50;

figure;
for joint = 1:6
    subplot(3, 2, joint);
    
    [c, lags] = xcov(error(:, joint), maxlag, 'normalized');
    stem(lags, c);

    xlabel('Lag');
    title(['Autocovariance of $e_{\tau_{', num2str(joint - 1), '}}$'], 'Interpreter', 'latex', 'FontSize', 18);
    grid on;
end

%%
error = avg_phase_torque_fixed - tau_py'; % [10000 x 6]
maxlag = 50;
% Set up a 6-row, 2-column layout
fig = figure;
t = tiledlayout(6, 2, 'TileSpacing', 'compact', 'Padding', 'compact');

for joint = 1:6
    % Left column: Hysteresis
    nexttile(2*joint - 1);
    plot(target_vel(:, joint), error(:, joint));
    
    % X-axis limits
    if joint >= 4
        xlim([-0.2 0.2]);
    else
        xlim([-0.3 0.3]);
    end

    % Add xlabel to every subplot for clarity
    xlabel(['$\dot{q}_{', num2str(joint - 1), '}$ (rad/s)'], 'Interpreter', 'latex', 'FontSize', 14);

    % Only add y-label once (middle left)
    if joint == 3
        ylabel('Torque [Nm]', 'FontSize', 14);
    end

    %title(['$e_{\tau_{', num2str(joint - 1), '}}$ vs $\dot{q}_{', num2str(joint - 1), '}$'], ...
          %'Interpreter', 'latex', 'FontSize', 12);
    
    legend(['$e_{\tau_{', num2str(joint - 1), '}}$'], 'Interpreter', 'latex', 'FontSize', 18, 'Location', 'best');
    grid on;

    % Right column: Autocovariance
    nexttile(2*joint);
    [c, lags] = xcov(error(:, joint), maxlag, 'normalized');
    stem(lags, c, 'filled');
    
    % Only put xlabel for the bottom autocovariance plot
    if joint == 6
        xlabel('Lag', 'FontSize', 16);
    end

    title(['Autocovariance $e_{\tau_{', num2str(joint - 1), '}}$'], ...
          'Interpreter', 'latex', 'FontSize', 16);
    grid on;
end
%% Autocovariance

figure;

for joint = 1:6
    % Create a subplot for torque (on the left side)
    subplot(6, 2, 2*joint-1); % 6 rows, 2 columns, odd column for torque plot
    plot(tau_full(joint, :), 'b-', 'LineWidth', 1.5);
    hold on;
    plot(avg_phase_torque(:, joint), 'r--', 'LineWidth', 1.5);
    hold off;
    xlabel(sprintf('q%d [rad/s]', joint));  % Joint velocity axis
    ylabel('Torque [Nm]');
    title(sprintf('Joint %d Torque', joint));
    legend('Tau model', 'Averaged Measured');
    
    % Create a subplot for autocovariance (on the right side)
    subplot(6, 2, 2*joint); % 6 rows, 2 columns, even column for autocovariance plot
    
    % Center the tau_fric data for autocovariance calculation
    tau_fric_centered = tau_fric(joint, :) - mean(tau_fric(joint, :));
    
    % Compute autocovariance for the joint
    [autocovariance, lags] = xcov(tau_fric_centered, 'biased'); % 'biased' for normalization
    
    % Plot the autocovariance
    plot(lags, autocovariance, 'b-', 'LineWidth', 1.5);
    xlabel('Lag');
    ylabel('Autocovariance');
    title(sprintf('Autocovariance eτ%d', joint));
    grid on;
end
